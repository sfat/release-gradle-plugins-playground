on: [push]
# Avoid running multiple pipelines concurrently to avoid overlapping releases and tags
concurrency:
  group: project
  cancel-in-progress: false
jobs:
  # Initialize the build process and infer the new version number
  init:
    name: Initialize
    outputs:
      # Make the 'newRelease' outputs from the Nyx action available for other jobs
      newRelease: ${{ steps.nyx.outputs.newRelease }}
    runs-on: ubuntu-latest
    steps:
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
      # This job only runs nyxInfer to produce the initial version and initializes the Gradle remote cache
      - name: Init with Gradle
        run: ./gradlew nyxInfer --build-cache --stacktrace
      # Run Nyx again (as a GitHub Action) to load the data from the State so that we can export useful job outputs
      - name: Load Nyx data
        id: nyx
        uses: mooltiverse/nyx-github-action@main
      - name: Archive Nyx state file
        uses: actions/upload-artifact@v3
        if: ${{ always() }}
        with:
          name: .nyx-state-${{ github.job }}.json
          path: build/.nyx-state.json
  build-java:
    name: Build - Java
    needs: init
#    if: needs.init.outputs.newRelease == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Git checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up JDK 19
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 19
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
      # Start from the -init pipeline cache and save the job output pipeline cache as -build-java
      - name: Set up the pipeline cache bringing the Nyx state
        uses: actions/cache@v3
        with:
          path: |
            build/
          key: pipeline-${{ github.run_id }}-${{ github.job }}
          restore-keys: |
            pipeline-${{ github.run_id }}-init
      # Bootstrap (no restore-keys) the Java cache and store it as -build-java
      - name: Set up the Java cache bringing Java artifacts
        uses: actions/cache@v3
        with:
          path: |
            build/
          key: java-${{ github.run_id }}-${{ github.job }}
      # Running the gradle-cache-action with no arguments makes it run just as a remote cache and not as a wrapper
      - name: Enable the Gradle remote cache
        uses: burrunan/gradle-cache-action@v1
        with:
          # Disable warning about missing distributionSha256Sum property in gradle-wrapper.properties
          gradle-distribution-sha-256-sum-warning: false
      - name: Assemble with Gradle
        run: ./gradlew build --build-cache --stacktrace
      - name: Archive Nyx state file
        uses: actions/upload-artifact@v3
        if: ${{ always() }}
        with:
          name: .nyx-state-${{ github.job }}.json
          path: build/.nyx-state.json
      - name: Archive Jar
        uses: actions/upload-artifact@v3
        with:
          name: jar
          path: 'build/libs/'
      - name: Publish with Gradle
        env:
          # The 'gitHubUser' and 'gitHubToken' variables are passed as credentials to publish packages to the GitHub Packages repository, see: https://docs.github.com/en/actions/publishing-packages/publishing-java-packages-with-gradle#publishing-packages-to-github-packages.
          # The GH_TOKEN is used by Nyx configured service 'github' (see the top level settings.gradle) to publish the release to GitHub Releases.
          # The 'GITHUB_TOKEN' is automatically generated and provided by GitHub Actions so it doesn't need to be manually created. We just use it and copy as Gradle properties or environment variables.
          # See:
          # - the Automatic Token Authentication: https://docs.github.com/en/actions/security-guides/automatic-token-authentication
          # - the 'secrets' Context:  https://docs.github.com/en/actions/learn-github-actions/contexts
          # - the Default Environment Variables: https://docs.github.com/en/actions/learn-github-actions/environment-variables#default-environment-variables
          # - enabling GITHUB_TOKEN to publish packages: https://docs.github.com/en/packages/managing-github-packages-using-github-actions-workflows/publishing-and-installing-a-package-with-github-actions#upgrading-a-workflow-that-accesses-ghcrio
          # See the top level https://github.com/mooltiverse/nyx/blob/main/CONTRIBUTING.md#contributing-code file for details about passing these values when testing locally
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ORG_GRADLE_PROJECT_gitHubUser: ${{ github.actor }}
          ORG_GRADLE_PROJECT_gitHubToken: ${{ secrets.GITHUB_TOKEN }}
#          ORG_GRADLE_PROJECT_dockerHubUser: ${{ secrets.DOCKER_HUB_USERNAME }}
#          ORG_GRADLE_PROJECT_dockerHubToken: ${{ secrets.DOCKER_HUB_TOKEN }}
#          ORG_GRADLE_PROJECT_ossrhUsername: ${{ secrets.MAVEN_USER }}
#          ORG_GRADLE_PROJECT_ossrhPassword: ${{ secrets.MAVEN_PASSWORD }}
#          ORG_GRADLE_PROJECT_signingKeyBase64: ${{ secrets.GPG_PRIVATE_KEY_BASE64 }}
#          ORG_GRADLE_PROJECT_signingPassword: ${{ secrets.GPC_PASSPHRASE }}
#          ORG_GRADLE_PROJECT_gradlePublishKey: ${{ secrets.GRADLE_PLUGIN_PUBLISH_KEY }}
#          ORG_GRADLE_PROJECT_gradlePublishSecret: ${{ secrets.GRADLE_PLUGIN_PUBLISH_SECRET }}
        run: ./gradlew nyxMake nyxMark nyxPublish publish --build-cache --stacktrace
      - name: Archive Nyx state file
        uses: actions/upload-artifact@v3
        if: ${{ always() }}
        with:
          name: .nyx-state-${{ github.job }}.json
          path: build/.nyx-state.json
  release:
    name: Release
    needs: build-java
    # Run this job only if:
    # - the Docker, Java or Go files have changed
    # - a new release must be issued (this flag is inferred by Nyx), in which case we rebuild and test everything
#    if: needs.init.outputs.dockerChanged == 'true' || needs.init.outputs.goChanged == 'true' || needs.init.outputs.javaChanged == 'true' || needs.init.outputs.newRelease == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Git checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up JDK 19
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 19
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
      # Start from the -publish pipeline cache and save the job output pipeline cache as -release
      - name: Set up the pipeline cache bringing the Nyx state
        uses: actions/cache@v3
        with:
          path: |
            build/
          key: pipeline-${{ github.run_id }}-${{ github.job }}
          restore-keys: |
            pipeline-${{ github.run_id }}-publish
      - name: Pull the Build cache bringing artifacts from the upstream Build jobs
        uses: actions/cache@v3
        with:
          path: |
            build/
          key: build-${{ github.run_id }}-${{ github.job }}
      # Running the gradle-cache-action with no arguments makes it run just as a remote cache and not as a wrapper
      - name: Enable the Gradle remote cache
        uses: burrunan/gradle-cache-action@v1
        with:
          # Disable warning about missing distributionSha256Sum property in gradle-wrapper.properties
          gradle-distribution-sha-256-sum-warning: false
      - name: Release with Gradle
        env:
          # The 'gitHubUser' and 'gitHubToken' variables are passed as credentials to publish packages to the GitHub Packages repository, see: https://docs.github.com/en/actions/publishing-packages/publishing-java-packages-with-gradle#publishing-packages-to-github-packages.
          # The GH_TOKEN is used by Nyx configured service 'github' (see the top level settings.gradle) to publish the release to GitHub Releases.
          # The 'GITHUB_TOKEN' is automatically generated and provided by GitHub Actions so it doesn't need to be manually created. We just use it and copy as Gradle properties or environment variables.
          # See:
          # - the Automatic Token Authentication: https://docs.github.com/en/actions/security-guides/automatic-token-authentication
          # - the 'secrets' Context:  https://docs.github.com/en/actions/learn-github-actions/contexts
          # - the Default Environment Variables: https://docs.github.com/en/actions/learn-github-actions/environment-variables#default-environment-variables
          # - GITHUB_TOKEN permissions for repository: https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#setting-the-permissions-of-the-github_token-for-your-repository
          # See the top level https://github.com/mooltiverse/nyx/blob/main/CONTRIBUTING.md#contributing-code file for details about passing these values when testing locally
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#          ORG_GRADLE_PROJECT_gitHubUser: ${{ github.actor }}
#          ORG_GRADLE_PROJECT_gitHubToken: ${{ secrets.GITHUB_TOKEN }}
        run: ./gradlew release --build-cache --stacktrace
      - name: Archive Nyx state file
        uses: actions/upload-artifact@v3
        if: ${{ always() }}
        with:
          name: .nyx-state-${{ github.job }}.json
          path: build/.nyx-state.json